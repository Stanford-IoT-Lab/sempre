# JavaExecutor Functions
(def @measureValueCast edu.stanford.nlp.sempre.thingtalk.ThingTalk.measureValueCast)

(def @paramForm edu.stanford.nlp.sempre.thingtalk.ThingTalk.paramForm)

(def @trigParam edu.stanford.nlp.sempre.thingtalk.ThingTalk.trigParam)
(def @queryParam edu.stanford.nlp.sempre.thingtalk.ThingTalk.queryParam)
(def @actParam edu.stanford.nlp.sempre.thingtalk.ThingTalk.actParam)

(def @timeRule edu.stanford.nlp.sempre.thingtalk.ThingTalk.timeRule)
(def @timeSpanRule edu.stanford.nlp.sempre.thingtalk.ThingTalk.timeSpanRule)
(def @wgd edu.stanford.nlp.sempre.thingtalk.ThingTalk.wgd)

(def @setupForm edu.stanford.nlp.sempre.thingtalk.ThingTalk.setupForm)

(def @cmdForm edu.stanford.nlp.sempre.thingtalk.ThingTalk.cmdForm)

(def @ansForm edu.stanford.nlp.sempre.thingtalk.ThingTalk.ansForm)

(def @jsonOut edu.stanford.nlp.sempre.thingtalk.ThingTalk.jsonOut)

(def @special edu.stanford.nlp.sempre.thingtalk.ThingTalk.special)

# Value Parsing
#(rule $NumValue (1) (ConstantFn (number 1.0)))
#(rule $NumValue (0) (ConstantFn (number 0.0)))
(rule $NumValue ($PHRASE) (NumberFn) (anchored 1))
(rule $DateValue ($PHRASE) (DateFn) (anchored 1))
(rule $TimeValue ($PHRASE) (TimeFn) (anchored 1))
(for @unit (s min h day week mon year)
	(rule $TimeUnit (@unit) (ConstantFn (string @unit)))
)
(rule $TimeIntervalValue ($NumValue $TimeUnit) (thingtalk.CallFn @measureValueCast))
(for @unit (C F byte KB MB GB TB kg lb g oz mps kmph mph m km mm cm mi in kcal kJ)
	(rule $Unit (@unit) (ConstantFn (string @unit)))
)
(rule $MeasureValue ($NumValue $Unit) (thingtalk.CallFn @measureValueCast))
(rule $BooleanValue (@true) (ConstantFn (boolean true)))
(rule $BooleanValue (@false) (ConstantFn (boolean false)))
# one can choose to enable floating strings, which means full strings to be picked up
# by anchors, or just single tokens, also picked up by anchors
(when floatingstrings
	(rule $StrValue ($PHRASE) (IdentityFn) (anchored 1))
)
#(when (not floatingstrings)
#	(rule $StrValue ($TOKEN) (IdentityFn) (anchored 1))
#)
#(rule $StringValue (`` $StrValue '') (IdentityFn))

(rule $StringValue ($PHRASE) (thingtalk.NerValueFn QUOTED_STRING String) (anchored 1))
(rule $UsernameValue ($TOKEN) (thingtalk.NerValueFn USERNAME "Username") (anchored 1))
(rule $ContactNameValue ($TOKEN) (thingtalk.NerValueFn USERNAME "Entity(tt:contact_name)") (anchored 1))
(rule $HashtagValue ($TOKEN) (thingtalk.NerValueFn HASHTAG "Hashtag") (anchored 1))
(rule $PhoneNumberValue ($PHRASE) (thingtalk.NerValueFn PHONE_NUMBER "PhoneNumber") (anchored 1))
(rule $EmailAddressValue ($TOKEN) (thingtalk.NerValueFn EMAIL_ADDRESS "EmailAddress") (anchored 1))
(rule $UrlValue ($TOKEN) (thingtalk.NerValueFn URL "URL") (anchored 1))
(rule $EntityValue ($TOKEN) (thingtalk.EntityLexiconFn @language_tag) (anchored 1))

(rule $PersonValue (@of $UsernameValue) (SelectFn 0))
(rule $RemotePersonValue (@ask $UsernameValue) (SelectFn 0))

(rule $LocationValue ($PHRASE) (thingtalk.LocationLexiconFn @language_tag) (anchored 1))
(rule $LocationValue (@here) (ConstantFn (location rel_current_location -1 -1) fb:type.any))
(rule $LocationValue @at_home (ConstantFn (location rel_home -1 -1) fb:type.any))
(rule $LocationValue @at_work (ConstantFn (location rel_work -1 -1) fb:type.any))

(rule $TimeIntervalValue ($PHRASE) (thingtalk.TimeDurationFn) (anchored 1))
(rule $PeriodicTimeValue (@every $TimeIntervalValue) (SelectFn 0))

(def @all_values ($DateValue $TimeValue $NumValue
$MeasureValue $TimeIntervalValue $BooleanValue $LocationValue
$PhoneNumberValue $EmailAddressValue $UsernameValue $ContactNameValue $HashtagValue $UrlValue 
$EntityValue $StringValue))

# Answer handling
# NOTE 1: string answers are handled by putting Sabrina in "raw" mode
# which bypasses sempre
# DO NOT put $Answer -> $StringValue here, it would catch everything and confuse the parser
# NOTE 2: boolean answers are matched to yes/no, which are specials
(def @answer_values ($DateValue $TimeValue $NumValue
$MeasureValue $TimeIntervalValue $LocationValue
$PhoneNumberValue $EmailAddressValue $UsernameValue $UrlValue $HashtagValue))

# FIXME: Integrate this to improve the canonicals
#(rule $PersonValue ($PHRASE) (FilterNerSpanFn PERSON) (anchored 1))
#(rule $OrgValue ($PHRASE) (FilterNerSpanFn ORGANIZATION) (anchored 1))

# HACK: binarization with introduce an intermediate if a rule has any token on the right hand side
# we don't want that, so we introduce a dummy category that only contains the token
(rule $With (@with) (ConstantFn null))

# Action Handling
(rule $ActionName ($TOKEN) (thingtalk.ThingpediaLexiconFn @language_tag action))
(rule $Action ($ActionName) (lambda act (call @actParam (var act))))
(rule $Action ($ActionName $PersonValue) (lambda act (lambda person (call @actParam (var person) (var act)))))
(for @v @all_values
	(rule $Action ($Action @v) (thingtalk.AddParamValueFn @with))
)
(rule $Action ($Action $With) (thingtalk.AddParamEnumFn))

(rule $TriggerName ($TOKEN) (thingtalk.ThingpediaLexiconFn @language_tag trigger))
(rule $Trigger ($TriggerName) (lambda trig (call @trigParam (var trig))))
(rule $Trigger ($TriggerName $PersonValue) (lambda trig (lambda person (call @trigParam (var person) (var trig)))))
(for @v @all_values
	(rule $Trigger ($Trigger @v) (thingtalk.AddParamValueFn @with))
)
(rule $Trigger ($Trigger $With) (thingtalk.AddParamEnumFn))

(for @logicOp (or and (or not) (and not))
    (for @v @all_values
        (rule $Trigger ($Trigger @v) (thingtalk.AddPredicateFn trigger @logicOp @if @equals =))
        (rule $Trigger ($Trigger @v) (thingtalk.AddPredicateFn trigger @logicOp @if @greater_than >))
        (rule $Trigger ($Trigger @v) (thingtalk.AddPredicateFn trigger @logicOp @if @less_than <))

        (rule $Trigger ($Trigger @v) (thingtalk.AddPredicateFn trigger @logicOp @if @contains contains))
        (rule $Trigger ($Trigger @v) (thingtalk.AddPredicateFn trigger @logicOp @if @starts_with starts))
        (rule $Trigger ($Trigger @v) (thingtalk.AddPredicateFn trigger @logicOp @if @ends_with ends))

        (rule $Trigger ($Trigger @v) (thingtalk.AddPredicateFn trigger @logicOp @if @having has))
    )
)

(rule $QueryName ($TOKEN) (thingtalk.ThingpediaLexiconFn @language_tag query))
(rule $Query ($QueryName) (lambda query (call @queryParam (var query))))
(rule $Query ($QueryName $PersonValue) (lambda query (lambda person (call @queryParam (var person) (var query)))))
(for @v @all_values
	(rule $Query ($Query @v) (thingtalk.AddParamValueFn @with))
)
(rule $Query ($Query $With) (thingtalk.AddParamEnumFn))

(for @logicOp (or and (or not) (and not))
    (for @v @all_values
        (rule $Query ($Query @v) (thingtalk.AddPredicateFn query @logicOp @if @equals =))
        (rule $Query ($Query @v) (thingtalk.AddPredicateFn query @logicOp @if @greater_than >))
        (rule $Query ($Query @v) (thingtalk.AddPredicateFn query @logicOp @if @less_than <))

        (rule $Query ($Query @v) (thingtalk.AddPredicateFn query @logicOp @if @contains contains))
        (rule $Query ($Query @v) (thingtalk.AddPredicateFn query @logicOp @if @starts_with starts))
        (rule $Query ($Query @v) (thingtalk.AddPredicateFn query @logicOp @if @ends_with ends))

        (rule $Query ($Query @v) (thingtalk.AddPredicateFn query @logicOp @if @having has))
    )
)

(rule $MonitorWhen @monitor_when (ConstantFn (string "")))
(rule $Notify ($MonitorWhen $Trigger) (SelectFn 1))

(rule $TimeRulePrefix @every_day_at (ConstantFn (string "")))
(rule $TimeTrigger ($TimeRulePrefix $TimeValue) (SelectFn 1))

(rule $TimeQueryRule  ($TimeTrigger $Query)               (thingtalk.CallFn @timeRule))
(rule $TimeActionRule ($TimeTrigger $Action)              (thingtalk.CallFn @timeRule))
(rule $TimeQueryRule  ($PeriodicTimeValue $Query)         (thingtalk.CallFn @timeSpanRule))
(rule $TimeActionRule ($PeriodicTimeValue $Action)        (thingtalk.CallFn @timeSpanRule))

(rule $TimeQueryActionRule ($TimeQueryRule @then $Action) (thingtalk.CallFn @wgd))

# use a shared category for the first part to reduce duplicate featurizations
(rule $WhenTriggerThen         (@when $Trigger @then)               (IdentityFn))
(rule $WgdQueryRule        ($WhenTriggerThen $Query)            (thingtalk.CallFn @wgd))
(rule $WgdActionRule       ($WhenTriggerThen $Action)           (thingtalk.CallFn @wgd))
(rule $WgdQueryActionRule  ($WgdQueryRule @then $Action)    (thingtalk.CallFn @wgd))
(rule $WgdQueryActionChain ($Query @then $Action)             (thingtalk.CallFn @wgd))

# the following rules are very very tricky
# they deal with "with foo that" passing of arguments from trigger to action
# and they rely on the precise binarization of the grammar to have correct canonicals
# in particular, the binarized grammar will include an intermediate binary rule with SelectFn 0
# and an unary cat rule with AddCompositionFn
# AddCompositionFn takes care of adding the "foo that" part

# NOTE: we don't compose TimeAction/TimeQuery, because passing the time to the action is not
# particularly useful

(rule $TimeQueryActionRule   ($TimeQueryActionRule $With)   (thingtalk.AddCompositionFn action))
(rule $TimeQueryActionRule   ($TimeQueryActionRule $With)   (thingtalk.AddEventFn action "$event" @event ))
#(rule $TimeQueryActionRule   ($TimeQueryActionRule $With)   (thingtalk.AddEventFn action "$event.title" @event_title ))
#(rule $TimeQueryActionRule   ($TimeQueryActionRule $With)   (thingtalk.AddEventFn action "$event.body" @event_body ))

(rule $WgdQueryRule        ($WgdQueryRule $With)        (thingtalk.AddCompositionFn query))
(rule $WgdQueryRule        ($WgdQueryRule $With)        (thingtalk.AddEventFn query "$event" @event ))
#(rule $WgdQueryRule        ($WgdQueryRule $With)        (thingtalk.AddEventFn query "$event.title" @event_title ))
#(rule $WgdQueryRule        ($WgdQueryRule $With)        (thingtalk.AddEventFn query "$event.body" @event_body ))

(rule $WgdActionRule       ($WgdActionRule $With)       (thingtalk.AddCompositionFn action))
(rule $WgdActionRule       ($WgdActionRule $With)       (thingtalk.AddEventFn action "$event" @event ))
#(rule $WgdActionRule       ($WgdActionRule $With)       (thingtalk.AddEventFn action "$event.title" @event_title ))
#(rule $WgdActionRule       ($WgdActionRule $With)       (thingtalk.AddEventFn action "$event.body" @event_body ))

(rule $WgdQueryActionRule  ($WgdQueryActionRule $With)  (thingtalk.AddCompositionFn action))
(rule $WgdQueryActionRule  ($WgdQueryActionRule $With)  (thingtalk.AddEventFn action "$event" @event ))
#(rule $WgdQueryActionRule  ($WgdQueryActionRule $With)  (thingtalk.AddEventFn action "$event.title" @event_title ))
#(rule $WgdQueryActionRule  ($WgdQueryActionRule $With)  (thingtalk.AddEventFn action "$event.body" @event_body ))

(rule $WgdQueryActionChain ($WgdQueryActionChain $With) (thingtalk.AddCompositionFn action))
(rule $WgdQueryActionChain ($WgdQueryActionChain $With) (thingtalk.AddEventFn action "$event" @event ))
#(rule $WgdQueryActionChain ($WgdQueryActionChain $With) (thingtalk.AddEventFn action "$event.title" @event_title ))
#(rule $WgdQueryActionChain ($WgdQueryActionChain $With) (thingtalk.AddEventFn action "$event.body" @event_body ))

(def @primitive_types ($Action $Notify $Query))
(def @compound_types ($TimeQueryRule $TimeActionRule $TimeQueryActionRule $WgdActionRule $WgdQueryRule
                  $WgdQueryActionRule $WgdQueryActionChain))

# Sending rules to a different person
(for @v @compound_types
    (rule $SetupRule ($RemotePersonValue @v) (lambda person (lambda rule (call @setupForm (var person) (var rule)))))
)

(for @v @primitive_types
    (rule $SetupRule ($RemotePersonValue @v) (lambda person (lambda prim (call @setupForm (var person) (var prim)))))
)

# Command handling
(rule $Device ($EntityValue) (thingtalk.FilterDeviceEntityType) (anchored 1))

(rule $Command (@help)              (ConstantFn (call @cmdForm   (string "help")      (string "generic"))))
(rule $Command (@help $Device)      (lambda value (call @cmdForm (string "help")      (var value))))

# special handling
# this used to be in SimpleLexicon but we moved it here for two reasons:
# 1) FloatingParser and SimpleLexicon do not like each other, meaning that you need
# to use the exact words in the lexicon for FloatingParser to parse properly (regardless of
# paraphrases)
# 2) It's easier to translate like this, and we don't need to teach SimpleLexicon
# about language tags
(rule $Special (@yes) (ConstantFn tt:root.special.yes))
(rule $Special (@no) (ConstantFn tt:root.special.no))
(rule $Special @never_mind (ConstantFn tt:root.special.nevermind))
(rule $Special @make_rule (ConstantFn tt:root.special.makerule))
# this is a special token that should never be matched
# it represents the failure to parse meaningfully (which triggers
# fallbacks on the client side)
(rule $Special (failuretoparse) (ConstantFn tt:root.special.failed))

(when includebookkeeping
  (for @v @answer_values
	(rule $Answer (@v) (lambda value (call @ansForm (var value))))
  )
  (rule $ROOT ($Answer) (lambda cmd (call @jsonOut (var cmd))))
  (rule $ROOT ($Command) (lambda cmd (call @jsonOut (var cmd))))
)

(for @v @primitive_types
	(rule $ROOT (@v) (lambda cmd (call @jsonOut (var cmd))))
)

(for @v @compound_types
	(rule $ROOT (@v) (lambda cmd (call @jsonOut (var cmd))))
)

(rule $ROOT ($SetupRule) (lambda cmd (call @jsonOut (var cmd))))

(when includebookkeeping
  (rule $ROOT ($Special) (lambda spl (call @special (var spl))))
)
