package edu.stanford.nlp.sempre.thingtalk;

import java.util.HashMap;
import java.util.Map;

import edu.stanford.nlp.sempre.NameValue;
import edu.stanford.nlp.sempre.Value;
import edu.stanford.nlp.sempre.Values;
import fig.basic.LispTree;

/**
 * Represents a parameter name for thingtalk, with the meta information
 * gathered from the Thingpedia DB
 * 
 * @author Giovanni Campagna
 */
public class ParamNameValue extends Value {
	public final String argname;
	public final String type;
	public final NameValue forChannel;

	public ParamNameValue(LispTree tree) {
		this.argname = tree.child(1).value;
		this.type = tree.child(2).value;
		this.forChannel = (NameValue) Values.fromLispTree(tree.child(3));
	}

	public ParamNameValue(String argname, String type, NameValue forChannel) {
		this.argname = argname;
		this.forChannel = forChannel;
		this.type = type;
	}

	@Override
	public LispTree toLispTree() {
		LispTree tree = LispTree.proto.newList();
		tree.addChild("paramname");
		tree.addChild(argname);
		tree.addChild(type);
		tree.addChild(forChannel.toLispTree());
		return tree;
	}

	@Override
	public Map<String, Object> toJson() {
		Map<String, Object> json = new HashMap<>();
		// this funky representation is for compat with NameValue
		json.put("id", "tt:param." + argname);
		return json;
	}

	// Generated by Eclipse

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((argname == null) ? 0 : argname.hashCode());
		result = prime * result + ((forChannel == null) ? 0 : forChannel.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ParamNameValue other = (ParamNameValue) obj;
		if (argname == null) {
			if (other.argname != null)
				return false;
		} else if (!argname.equals(other.argname))
			return false;
		if (forChannel == null) {
			if (other.forChannel != null)
				return false;
		} else if (!forChannel.equals(other.forChannel))
			return false;
		if (type == null) {
			if (other.type != null)
				return false;
		} else if (!type.equals(other.type))
			return false;
		return true;
	}
}
