package edu.stanford.nlp.sempre.thingtalk;

import java.util.*;

import edu.stanford.nlp.sempre.Value;
import fig.basic.LispTree;

public class ChannelNameValue extends Value {
	public final String kind;
	public final String channelName;
	public final Map<String, String> argtypes;

	public ChannelNameValue(LispTree tree) {
		this.kind = tree.child(1).value;
		this.channelName = tree.child(2).value;
		this.argtypes = new HashMap<>();

		for (int i = 3; i < tree.children.size(); i++)
			argtypes.put(tree.child(i).child(0).value, tree.child(i).child(1).value);
	}

	public ChannelNameValue(String kind, String channelName, List<String> argnames, List<String> argtypes) {
		this.kind = kind;
		this.channelName = channelName;
		this.argtypes = new HashMap<>();

		Iterator<String> nameit = argnames.iterator();
		Iterator<String> typeit = argtypes.iterator();
		while (typeit.hasNext() && nameit.hasNext())
			this.argtypes.put(nameit.next(), typeit.next());
	}

	public String getArgType(String name) {
		return argtypes.get(name);
	}

	@Override
	public LispTree toLispTree() {
		LispTree tree = LispTree.proto.newList();
		tree.addChild("channel");
		tree.addChild(kind);
		tree.addChild(channelName);
		for (Map.Entry<String, String> e : argtypes.entrySet()) {
			LispTree child = LispTree.proto.newList();
			child.addChild(e.getKey());
			child.addChild(e.getValue());
			tree.addChild(child);
		}
		return tree;
	}

	@Override
	public Map<String, Object> toJson() {
		Map<String, Object> json = new HashMap<>();
		// this funky representation is for compat with NameValue
		json.put("id", "tt:" + kind + "." + channelName);
		return json;
	}

	// Generated by Eclipse

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + argtypes.hashCode();
		result = prime * result + channelName.hashCode();
		result = prime * result + kind.hashCode();
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ChannelNameValue other = (ChannelNameValue) obj;
		if (!argtypes.equals(other.argtypes))
			return false;
		if (!channelName.equals(other.channelName))
			return false;
		if (!kind.equals(other.kind))
			return false;
		return true;
	}
}
