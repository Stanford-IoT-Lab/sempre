# JavaExecutor Functions
(def @measureValueCast edu.stanford.nlp.sempre.thingtalk.ThingTalk.measureValueCast)
(def @phoneNumberCast edu.stanford.nlp.sempre.thingtalk.ThingTalk.phoneNumberCast)
(def @emailAddressCast edu.stanford.nlp.sempre.thingtalk.ThingTalk.emailAddressCast)

(def @paramForm edu.stanford.nlp.sempre.thingtalk.ThingTalk.paramForm)

(def @trigParam edu.stanford.nlp.sempre.thingtalk.ThingTalk.trigParam)
(def @queryParam edu.stanford.nlp.sempre.thingtalk.ThingTalk.queryParam)
(def @actParam edu.stanford.nlp.sempre.thingtalk.ThingTalk.actParam)

(def @timeRule edu.stanford.nlp.sempre.thingtalk.ThingTalk.timeRule)
(def @timeSpanRule edu.stanford.nlp.sempre.thingtalk.ThingTalk.timeSpanRule)
(def @ifttt edu.stanford.nlp.sempre.thingtalk.ThingTalk.ifttt)

(def @cmdForm edu.stanford.nlp.sempre.thingtalk.ThingTalk.cmdForm)

(def @ansForm edu.stanford.nlp.sempre.thingtalk.ThingTalk.ansForm)

(def @jsonOut edu.stanford.nlp.sempre.thingtalk.ThingTalk.jsonOut)

(def @special edu.stanford.nlp.sempre.thingtalk.ThingTalk.special)

# Value Parsing
(rule $NumValue (@one) (ConstantFn (number 1)))
(rule $NumValue ($PHRASE) (NumberFn) (anchored 1))
(rule $DateValue ($PHRASE) (DateFn) (anchored 1))
(rule $TimeValue ($PHRASE) (TimeFn) (anchored 1))
(for @unit (s min h day week mon year)
	(rule $TimeUnit (@unit) (ConstantFn (string @unit)))
)
(rule $TimeIntervalValue ($NumValue $TimeUnit) (thingtalk.CallFn @measureValueCast))
(for @unit (C F byte KB MB GB TB)
	(rule $Unit (@unit) (ConstantFn (string @unit)))
)
(rule $MeasureValue ($NumValue $Unit) (thingtalk.CallFn @measureValueCast))
(rule $BooleanValue (@true) (ConstantFn (boolean true)))
(rule $BooleanValue (@false) (ConstantFn (boolean false)))
# one can choose to enable floating strings, which means full strings to be picked up
# by anchors, or just single tokens, also picked up by anchors
(when floatingstrings
	(rule $StrValue ($PHRASE) (IdentityFn) (anchored 1))
)
(when (not floatingstrings)
	(rule $StrValue ($TOKEN) (IdentityFn) (anchored 1))
)
(rule $StringValue (`` $StrValue '') (IdentityFn))
# we always have this anchored rule, so that we always pick up
# if the user explicitly types in quotes
(rule $StringValue (`` $PHRASE '') (IdentityFn) (anchored 1))
# handle usernames, slack channel names, hashtags, etc.
(rule $StringValue ($TOKEN) (FilterRegexFn "[@#](.+)") (anchored 1))
(rule $LocationValue ($PHRASE) (thingtalk.LocationLexiconFn @language_tag) (anchored 1))
(rule $LocationValue (@here) (ConstantFn (location rel_current_location -1 -1) fb:type.any))
(rule $LocationValue @at_home (ConstantFn (location rel_home -1 -1) fb:type.any))
(rule $LocationValue @at_work (ConstantFn (location rel_work -1 -1) fb:type.any))

# recognize email addresses and phone numbers as strings
(rule $PhoneNumber ($PHRASE) (NerValueFn PHONE_NUMBER) (anchored 1))
(rule $PhoneNumberValue ($PhoneNumber) (lambda v (call @phoneNumberCast (var v))))
# optimization: email addresses are always single token
(rule $EmailAddress ($TOKEN) (NerValueFn EMAIL_ADDRESS) (anchored 1))
(rule $EmailAddressValue ($EmailAddress) (lambda v (call @emailAddressCast (var v))))

(rule $PeriodicTimeValue ($PHRASE) (thingtalk.TimeDurationFn) (anchored 1))
(rule $PeriodicTimeValue (@every $TimeIntervalValue) (SelectFn 0))

(def @all_values ($DateValue $TimeValue $NumValue
$MeasureValue $TimeIntervalValue $BooleanValue $LocationValue
$PhoneNumberValue $EmailAddressValue $StringValue))

# Answer handling
# NOTE 1: string answers are handled by putting Sabrina in "raw" mode
# which bypasses sempre
# DO NOT put $Answer -> $StringValue here, it would catch everything and confuse the parser
# NOTE 2: boolean answers are matched to yes/no, which are specials
# but you still need to handle them here to match synonyms of true/false like on/off
# that should not be learned as synonyms of yes/no
(def @answer_values ($DateValue $TimeValue $NumValue
$MeasureValue $TimeIntervalValue $BooleanValue $LocationValue
$PhoneNumberValue $EmailAddressValue))

# FIXME: Integrate this to improve the canonicals
#(rule $PersonValue ($PHRASE) (FilterNerSpanFn PERSON) (anchored 1))
#(rule $OrgValue ($PHRASE) (FilterNerSpanFn ORGANIZATION) (anchored 1))

# MUST be kept in sync with AddValueFn.OPERATORS
(def @op_list (@is @contains @is_greater_than @is_less_than @has))

# Action Handling
(rule $ActionName ($TOKEN) (thingtalk.ThingpediaLexiconFn @language_tag action) (anchored 1))
(rule $Action ($ActionName) (lambda act (call @actParam (var act))))
(for @v @all_values
	(rule $Action ($Action @v) (thingtalk.AddValueFn action @with @is is))
)
(rule $Action ($Action @with) (thingtalk.AddEnumFn @is))

(rule $TriggerName ($TOKEN) (thingtalk.ThingpediaLexiconFn @language_tag trigger) (anchored 1))
(rule $Trigger ($TriggerName) (lambda trig (call @trigParam (var trig))))
(for @v @all_values
	(rule $Trigger ($Trigger @v) (thingtalk.AddValueFn trigger @with @is is))
	(rule $Trigger ($Trigger @v) (thingtalk.AddValueFn trigger @with @contains contains))
	(rule $Trigger ($Trigger @v) (thingtalk.AddValueFn trigger @with @is_greater_than >))
	(rule $Trigger ($Trigger @v) (thingtalk.AddValueFn trigger @with @is_less_than <))
	(rule $Trigger ($Trigger @v) (thingtalk.AddValueFn trigger @with @has has))
)
(rule $Trigger ($Trigger @with) (thingtalk.AddEnumFn @is))

(rule $QueryName ($TOKEN) (thingtalk.ThingpediaLexiconFn @language_tag query) (anchored 1))
(rule $Query ($QueryName) (lambda query (call @queryParam (var query))))
(for @v @all_values
	(rule $Query ($Query @v) (thingtalk.AddValueFn query @with @is is))
	(rule $Query ($Query @v) (thingtalk.AddValueFn query @with @contains contains))
	(rule $Query ($Query @v) (thingtalk.AddValueFn query @with @is_greater_than >))
	(rule $Query ($Query @v) (thingtalk.AddValueFn query @with @is_less_than <))
	(rule $Query ($Query @v) (thingtalk.AddValueFn query @with @has has))
)
(rule $Query ($Query @with) (thingtalk.AddEnumFn @is))

(rule $MonitorIf @monitor_if (ConstantFn (string "")))
(rule $Notify ($MonitorIf $Trigger) (SelectFn 1))

(rule $TimeRulePrefix @every_day_at (ConstantFn (string "")))
(rule $TimeTrigger ($TimeRulePrefix $TimeValue) (SelectFn 1))

(rule $TimeQueryRule  ($TimeTrigger $Query)               (thingtalk.CallFn @timeRule))
(rule $TimeActionRule ($TimeTrigger $Action)              (thingtalk.CallFn @timeRule))
(rule $TimeQueryRule  ($PeriodicTimeValue $Query)         (thingtalk.CallFn @timeSpanRule))
(rule $TimeActionRule ($PeriodicTimeValue $Action)        (thingtalk.CallFn @timeSpanRule))
(rule $TimeActionRule ($TimeQueryRule @then $Action)      (thingtalk.CallFn @ifttt))

# manually binarize rule meaningfully
(rule $IfTrigger       (@if $Trigger) (SelectFn 0))
(rule $IfTriggerThen   ($IfTrigger @then)  (SelectFn 0))
(rule $IftttQueryRule  ($IfTriggerThen $Query)            (thingtalk.CallFn @ifttt))
(rule $IftttActionRule ($IfTriggerThen $Action)           (thingtalk.CallFn @ifttt))
(rule $IftttActionRule ($IftttQueryRule @then $Action)    (thingtalk.CallFn @ifttt))
(rule $IftttChain      ($Query @then $Action)        (thingtalk.CallFn @ifttt))

# the following rules are very very tricky
# they deal with "with foo is that" passing of arguments from trigger to action
# and they rely on the precise binarization of the grammar to have correct canonicals
# in particular, the binarized grammar will include an intermediate binary rule with SelectFn 0
# and an unary cat rule with AddCompositionFn
# AddCompositionFn takes care of adding the "foo is that" part
(rule $TimeQueryRule   ($TimeQueryRule @with)            (thingtalk.AddCompositionFn query @is))
(rule $TimeActionRule  ($TimeActionRule @with)           (thingtalk.AddCompositionFn action @is))
(rule $IftttQueryRule  ($IftttQueryRule @with)           (thingtalk.AddCompositionFn query @is))
(rule $IftttActionRule ($IftttActionRule @with)          (thingtalk.AddCompositionFn action @is))
(rule $IftttChain      ($IftttChain @with)               (thingtalk.AddCompositionFn action @is))

(rule $Device ($TOKEN) (thingtalk.ThingpediaLexiconFn @language_tag kind) (anchored 1))

# Command handling
(rule $Command (@discover)          (ConstantFn (call @cmdForm (string "discover") (string generic))))
(rule $Command (@help)              (ConstantFn (call @cmdForm (string "help") (string generic))))
(rule $Command (@help $Device)      (lambda value (call @cmdForm (string "help") (var value))))
(rule $Command (@list)              (ConstantFn (call @cmdForm (string "list") (string generic))))
(rule $Command (@list @devices)     (ConstantFn (call @cmdForm (string "list") (string device))))
(rule $Command (@list @commands)    (ConstantFn (call @cmdForm (string "list") (string command))))
(rule $Command (@configure)         (ConstantFn (call @cmdForm (string "configure") (string generic))))
(rule $Command (@configure $Device) (lambda value (call @cmdForm (string "configure") (var value))))

# special handling
# this used to be in SimpleLexicon but we moved it here for two reasons:
# 1) FloatingParser and SimpleLexicon do not like each other, meaning that you need
# to use the exact words in the lexicon for FloatingParser to parse properly (regardless of
# paraphrases)
# 2) It's easier to translate like this, and we don't need to teach SimpleLexicon
# about language tags
(rule $Special (@yes) (ConstantFn tt:root.special.yes))
(rule $Special (@no) (ConstantFn tt:root.special.no))
(rule $Special (@hello) (ConstantFn tt:root.special.hello))
(rule $Special (@thanks) (ConstantFn tt:root.special.thankyou))
(rule $Special (@sorry) (ConstantFn tt:root.special.sorry))
(rule $Special (@cool) (ConstantFn tt:root.special.cool))
(rule $Special @never_mind (ConstantFn tt:root.special.nevermind))
# this is a literal, it is not translated
(rule $Special (debug) (ConstantFn tt:root.special.debug))
# this is a special token that should never be matched
# it represents the failure to parse meaningfully (which triggers
# fallbacks on the client side)
(rule $Special (failuretoparse) (ConstantFn tt:root.special.failed))

(for @v @answer_values
	(rule $Answer (@v) (lambda value (call @ansForm (var value))))
)

(for @v ($Command $Action $Notify $Query $Answer $TimeQueryRule $TimeActionRule $IftttActionRule $IftttQueryRule $IftttChain)
	(rule $ROOT (@v) (lambda cmd (call @jsonOut (var cmd))))
)
(rule $ROOT ($Special) (lambda spl (call @special (var spl))))
